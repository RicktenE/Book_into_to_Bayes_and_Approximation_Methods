---
title: "Multilevel Particle filter - SMC"
format: html
editor: visual
execute:
  cache: true
# jupyter: python3
---

## load libraries needed

```{r}
library(ggplot2)

```

# Multi-level models

Yes, the SMC particle filter can be used for multilevel models. Multilevel models involve hierarchical structures where the observations are nested within different levels or groups. The SMC particle filter can handle such structures by appropriately accounting for the covariance between levels.

In the context of multilevel models, the SMC particle filter extends the standard particle filtering algorithm by introducing additional steps to account for the covariance between levels. Here's a high-level overview of how the SMC particle filter can be applied to multilevel models:

1 - Initialization: Initialize the particles at each level of the multilevel model, taking into account the prior distributions and covariances between levels.

2 - Prediction: Propagate the particles forward in time at each level based on the system dynamics and the covariance structures within and between levels.

3 - Update: Calculate the likelihood of the observations at each level, considering the covariance between levels. Assign weights to the particles based on their likelihoods.

4 - Resampling: Perform resampling at each level independently, ensuring that the resampling step maintains the covariance structure between levels. This can be achieved by using techniques such as conditional resampling or resampling based on auxiliary variables that capture the dependencies between levels.

5 - Estimation: Estimate the filtered states and parameters at each level based on the particles, taking into account the covariance between levels. This can be done by summarizing the particles using appropriate statistics or using more advanced estimation techniques such as particle learning or Markov chain Monte Carlo (MCMC).

By explicitly considering the covariance structure between levels, the SMC particle filter allows for inference in multilevel models. The resampling step, in particular, plays a crucial role in maintaining the dependencies between levels, ensuring that the particles represent the posterior distribution accurately.

It's worth noting that the implementation of the SMC particle filter for multilevel models can be more complex than for single-level models, as it requires carefully handling the covariance structures. However, with appropriate adjustments and considerations, the SMC particle filter can be a powerful tool for state estimation in multilevel models.

# Toy example

Here's a toy model that demonstrates the application of the SMC particle filter to a simple multilevel model. In this example, we'll consider a two-level model with a common parameter that affects the observations at each level.

In this toy model, we generate observations at two levels. The observations at the first level are affected by a common parameter, and the observations at the second level depend on the observations at the first level. The particle filter estimates the filtered states and provides a distribution of the parameter values over time.

Feel free to modify the parameters or add complexity to the model to explore different scenarios and observe how the SMC particle filter captures the dependencies between levels in the multilevel model. \# R

```{r}
# Generate observations at each level
generate_observations <- function(num_samples, true_param, noise_sd) {
  observations <- matrix(nrow = num_samples, ncol = 2)
  for (i in 1:num_samples) {
    # Level 1 observations
    level1_obs <- rnorm(1, true_param, noise_sd)
    
    # Level 2 observations
    level2_obs <- rnorm(1, level1_obs, noise_sd)
    
    observations[i, ] <- c(level1_obs, level2_obs)
  }
  return(observations)
}

# Calculate the likelihood of a particle at each level
calculate_likelihood <- function(particle, observation, noise_sd) {
  level1_likelihood <- dnorm(observation[1], particle, noise_sd)
  level2_likelihood <- dnorm(observation[2], observation[1], noise_sd)
  return(level1_likelihood * level2_likelihood)
}

# Particle Filter SMC function for multilevel model
particle_filter_smc_multilevel <- function(num_samples, num_particles, noise_sd) {
  # Initialize particles and weights
  particles <- rnorm(num_particles, 0, 1)
  weights <- rep(1/num_particles, num_particles)
  
  # Initialize estimates
  filtered_states <- matrix(nrow = num_samples, ncol = num_particles)
  
  for (t in 1:num_samples) {
    # Generate observations
    observations <- generate_observations(1, true_param, noise_sd)
    
    # Update weights
    for (i in 1:num_particles) {
      weights[i] <- calculate_likelihood(particles[i], observations, noise_sd) * weights[i]
    }
    weights <- weights / sum(weights)
    
    # Resampling step
    indices <- sample.int(num_particles, num_particles, replace = TRUE, prob = weights)
    particles <- particles[indices]
    
    # Estimate filtered state
    filtered_states[t, ] <- particles
  }
  
  return(filtered_states)
}

# True parameter value
true_param <- 2.0

# Set random seed for reproducibility
set.seed(123)

# Run the particle filter for the multilevel model
num_samples <- 100
num_particles <- 100
noise_sd <- 1.0
filtered_states <- particle_filter_smc_multilevel(num_samples, num_particles, noise_sd)

# Plot the results
matplot(filtered_states, type = "l", lty = 1, col = "blue", main = "Particle Filter SMC for Multilevel Model",
        xlab = "Time Step", ylab = "Filtered State")
abline(h = true_param, col = "red", lty = 2, lwd = 2, label = "True Parameter")
legend("topright", legend = "True Parameter", col = "red", lty = 2, lwd = 2)

```

<!-- # Python -->

<!-- ```{python} -->
<!-- import numpy as np -->
<!-- import matplotlib.pyplot as plt -->

<!-- # Generate observations at each level -->
<!-- def generate_observations(num_samples, true_param, noise_sd): -->
<!--     observations = [] -->
<!--     for _ in range(num_samples): -->
<!--         # Level 1 observations -->
<!--         level1_obs = np.random.normal(true_param, noise_sd) -->

<!--         # Level 2 observations -->
<!--         level2_obs = np.random.normal(level1_obs, noise_sd) -->

<!--         observations.append([level1_obs, level2_obs]) -->
<!--     return np.array(observations) -->

<!-- # Calculate the likelihood of a particle at each level -->
<!-- def calculate_likelihood(particle, observation, noise_sd): -->
<!--     level1_likelihood = np.exp(-0.5 * ((observation[0] - particle) / noise_sd)**2) / (np.sqrt(2*np.pi) * noise_sd) -->
<!--     level2_likelihood = np.exp(-0.5 * ((observation[1] - observation[0]) / noise_sd)**2) / (np.sqrt(2*np.pi) * noise_sd) -->
<!--     return level1_likelihood * level2_likelihood -->

<!-- # Particle Filter SMC function for multilevel model -->
<!-- def particle_filter_smc_multilevel(num_samples, num_particles, noise_sd): -->
<!--     # Initialize particles and weights -->
<!--     particles = np.random.normal(0, 1, num_particles) -->
<!--     weights = np.ones(num_particles) / num_particles -->

<!--     # Initialize estimates -->
<!--     filtered_states = np.zeros((num_samples, num_particles)) -->

<!--     for t in range(num_samples): -->
<!--         # Generate observations -->
<!--         observations = generate_observations(1, true_param, noise_sd) -->

<!--         # Update weights -->
<!--         for i in range(num_particles): -->
<!--             weights[i] = calculate_likelihood(particles[i], observations, noise_sd) * weights[i] -->
<!--         weights /= np.sum(weights) -->

<!--         # Resampling step -->
<!--         indices = np.random.choice(np.arange(num_particles), size=num_particles, replace=True, p=weights) -->
<!--         particles = particles[indices] -->

<!--         # Estimate filtered state -->
<!--         filtered_states[t] = particles -->

<!--     return filtered_states -->

<!-- # True parameter value -->
<!-- true_param = 2.0 -->

<!-- # Set random seed for reproducibility -->
<!-- np.random.seed(123) -->

<!-- # Run the particle filter for the multilevel model -->
<!-- num_samples = 100 -->
<!-- num_particles = 100 -->
<!-- noise_sd = 1.0 -->
<!-- filtered_states = particle_filter_smc_multilevel(num_samples, num_particles, noise_sd) -->

<!-- # Plot the results -->
<!-- plt.figure(figsize=(10, 6)) -->
<!-- for p in range(num_particles): -->
<!--     plt.plot(filtered_states[:, p], alpha=0.2, color='b') -->
<!-- plt.axhline(true_param, color='r', linestyle='--', label='True Parameter') -->
<!-- plt.xlabel('Time Step') -->
<!-- plt.ylabel('Filtered State') -->
<!-- plt.title('Particle Filter SMC for Multilevel Model') -->
<!-- plt.legend() -->
<!-- plt.show() -->


<!-- ``` -->
