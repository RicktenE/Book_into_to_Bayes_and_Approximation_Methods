---
title: "Gaussian sum filter"
format: html
editor: visual
execute: 
  cache: true
  warning: false
  message: false
# jupyter: python3
---

## load libraries needed

```{r, message=FALSE}
library(ggplot2)
```

# Gaussian sum filter

The Gaussian sum filter is a technique used to approximate probability distributions that can be represented as a sum of Gaussian distributions. It is often used in signal processing to estimate the state of a system from noisy measurements. The approach involves representing the probability density function (PDF) of the system state as a sum of Gaussian distributions with different means and covariance matrices. The resulting approximation is then used to estimate the state of the system.

```{r}
# Generate some example data
set.seed(123)
x <- seq(0, 10, length.out = 101)
y <- sin(x) + rnorm(101, 0, 0.1)



# Define the Gaussian sum filter function
gsf <- function(x, y, mu, sigma, w) {
  # Compute the Gaussian kernels
  kernels <- sapply(mu, function(m) dnorm(x, m, sigma))
  
  # Compute the filtered values
  filtered <- apply(kernels * w, 2, function(wk) sum(wk * y))
  
  return(filtered)
}

# Define the parameters of the filter
mu <- seq(0, 10, length.out = 101)
sigma <- 0.5
w <- rep(1/11, 101)

# Apply the filter to the example data
filtered <- gsf(x, y, mu, sigma, w)


# Plot the original and filtered data
df_plot <- data.frame(x =x, Original = y, Filtered = filtered)


plot(x, y, type = 'l', col = 'blue', main = 'Gaussian sum filter example')
lines(x, filtered, col = 'red')
legend('topleft', legend = c('Original', 'Filtered'), col = c('blue', 'red'), lty = 1)
```

In this example, we generate some example data (y) and apply a Gaussian sum filter to it using the gsf function. The filter is defined by the parameters mu (the means of the Gaussian kernels), sigma (the standard deviation of the kernels), and w (the weights of the kernels). We then plot the original and filtered data to visualize the effect of the filter.
